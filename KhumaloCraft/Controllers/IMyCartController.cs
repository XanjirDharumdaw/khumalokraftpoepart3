using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.Net.Http.Headers;
using System.Diagnostics.CodeAnalysis;
using System.Security.Claims;
using System.Text;

namespace KhumaloCraft.Controllers
{
    public interface IMyCartController
    {
        AcceptedResult Accepted();
        AcceptedResult Accepted([ActionResultObjectValue] object? value);
        AcceptedResult Accepted(string? uri);
        AcceptedResult Accepted(string? uri, [ActionResultObjectValue] object? value);
        AcceptedResult Accepted(Uri uri);
        AcceptedResult Accepted(Uri uri, [ActionResultObjectValue] object? value);
        AcceptedAtActionResult AcceptedAtAction(string? actionName);
        AcceptedAtActionResult AcceptedAtAction(string? actionName, [ActionResultObjectValue] object? value);
        AcceptedAtActionResult AcceptedAtAction(string? actionName, object? routeValues, [ActionResultObjectValue] object? value);
        AcceptedAtActionResult AcceptedAtAction(string? actionName, string? controllerName);
        AcceptedAtActionResult AcceptedAtAction(string? actionName, string? controllerName, [ActionResultObjectValue] object? routeValues);
        AcceptedAtActionResult AcceptedAtAction(string? actionName, string? controllerName, object? routeValues, [ActionResultObjectValue] object? value);
        AcceptedAtRouteResult AcceptedAtRoute([ActionResultObjectValue] object? routeValues);
        AcceptedAtRouteResult AcceptedAtRoute(object? routeValues, [ActionResultObjectValue] object? value);
        AcceptedAtRouteResult AcceptedAtRoute(string? routeName);
        AcceptedAtRouteResult AcceptedAtRoute(string? routeName, object? routeValues);
        AcceptedAtRouteResult AcceptedAtRoute(string? routeName, object? routeValues, [ActionResultObjectValue] object? value);
        Task<IActionResult> AddToCart(int productId);
      
        BadRequestResult BadRequest();
        BadRequestObjectResult BadRequest([ActionResultObjectValue] ModelStateDictionary modelState);
        BadRequestObjectResult BadRequest([ActionResultObjectValue] object? error);
        ChallengeResult Challenge();
        ChallengeResult Challenge(AuthenticationProperties properties);
        ChallengeResult Challenge(AuthenticationProperties properties, params string[] authenticationSchemes);
        ChallengeResult Challenge(params string[] authenticationSchemes);
        ConflictResult Conflict();
        ConflictObjectResult Conflict([ActionResultObjectValue] ModelStateDictionary modelState);
        ConflictObjectResult Conflict([ActionResultObjectValue] object? error);
        ContentResult Content(string content);
        ContentResult Content(string content, MediaTypeHeaderValue? contentType);
        ContentResult Content(string content, string contentType);
        ContentResult Content(string content, string contentType, Encoding contentEncoding);
        CreatedResult Created();
        CreatedResult Created(string? uri, [ActionResultObjectValue] object? value);
        CreatedResult Created(Uri? uri, [ActionResultObjectValue] object? value);
        CreatedAtActionResult CreatedAtAction(string? actionName, [ActionResultObjectValue] object? value);
        CreatedAtActionResult CreatedAtAction(string? actionName, object? routeValues, [ActionResultObjectValue] object? value);
        CreatedAtActionResult CreatedAtAction(string? actionName, string? controllerName, object? routeValues, [ActionResultObjectValue] object? value);
        CreatedAtRouteResult CreatedAtRoute(object? routeValues, [ActionResultObjectValue] object? value);
        CreatedAtRouteResult CreatedAtRoute(string? routeName, [ActionResultObjectValue] object? value);
        CreatedAtRouteResult CreatedAtRoute(string? routeName, object? routeValues, [ActionResultObjectValue] object? value);
        bool Equals(object? obj);
        IActionResult FakeCheckout(string fullName, string email, string phone, decimal totalAmount);
     
        FileContentResult File(byte[] fileContents, string contentType);
        FileContentResult File(byte[] fileContents, string contentType, bool enableRangeProcessing);
        FileContentResult File(byte[] fileContents, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        FileContentResult File(byte[] fileContents, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        FileContentResult File(byte[] fileContents, string contentType, string? fileDownloadName);
        FileContentResult File(byte[] fileContents, string contentType, string? fileDownloadName, bool enableRangeProcessing);
        FileContentResult File(byte[] fileContents, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        FileContentResult File(byte[] fileContents, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        FileStreamResult File(Stream fileStream, string contentType);
        FileStreamResult File(Stream fileStream, string contentType, bool enableRangeProcessing);
        FileStreamResult File(Stream fileStream, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        FileStreamResult File(Stream fileStream, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        FileStreamResult File(Stream fileStream, string contentType, string? fileDownloadName);
        FileStreamResult File(Stream fileStream, string contentType, string? fileDownloadName, bool enableRangeProcessing);
        FileStreamResult File(Stream fileStream, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        FileStreamResult File(Stream fileStream, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        VirtualFileResult File(string virtualPath, string contentType);
        VirtualFileResult File(string virtualPath, string contentType, bool enableRangeProcessing);
        VirtualFileResult File(string virtualPath, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        VirtualFileResult File(string virtualPath, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        VirtualFileResult File(string virtualPath, string contentType, string? fileDownloadName);
        VirtualFileResult File(string virtualPath, string contentType, string? fileDownloadName, bool enableRangeProcessing);
        VirtualFileResult File(string virtualPath, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        VirtualFileResult File(string virtualPath, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        ForbidResult Forbid();
        ForbidResult Forbid(AuthenticationProperties properties);
        ForbidResult Forbid(AuthenticationProperties properties, params string[] authenticationSchemes);
        ForbidResult Forbid(params string[] authenticationSchemes);
        int GetHashCode();
        IActionResult Index();
      
        JsonResult Json(object? data);
        JsonResult Json(object? data, object? serializerSettings);
    
        NoContentResult NoContent();
        NotFoundResult NotFound();
        NotFoundObjectResult NotFound([ActionResultObjectValue] object? value);
        OkResult Ok();
        OkObjectResult Ok([ActionResultObjectValue] object? value);
        void OnActionExecuted(ActionExecutedContext context);
        void OnActionExecuting(ActionExecutingContext context);
        Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next);
        PartialViewResult PartialView();
        PartialViewResult PartialView(object? model);
        PartialViewResult PartialView(string? viewName);
        PartialViewResult PartialView(string? viewName, object? model);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, bool enableRangeProcessing);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string? fileDownloadName);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string? fileDownloadName, bool enableRangeProcessing);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);
        PhysicalFileResult PhysicalFile(string physicalPath, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);
        ObjectResult Problem(string? detail = null, string? instance = null, int? statusCode = null, string? title = null, string? type = null);
        RedirectResult Redirect([StringSyntax("Uri")] string url);
        RedirectResult RedirectPermanent([StringSyntax("Uri")] string url);
        RedirectResult RedirectPermanentPreserveMethod([StringSyntax("Uri")] string url);
        RedirectResult RedirectPreserveMethod([StringSyntax("Uri")] string url);
        RedirectToActionResult RedirectToAction();
        RedirectToActionResult RedirectToAction(string? actionName);
        RedirectToActionResult RedirectToAction(string? actionName, object? routeValues);
        RedirectToActionResult RedirectToAction(string? actionName, string? controllerName);
        RedirectToActionResult RedirectToAction(string? actionName, string? controllerName, object? routeValues);
        RedirectToActionResult RedirectToAction(string? actionName, string? controllerName, object? routeValues, string? fragment);
        RedirectToActionResult RedirectToAction(string? actionName, string? controllerName, string? fragment);
        RedirectToActionResult RedirectToActionPermanent(string? actionName);
        RedirectToActionResult RedirectToActionPermanent(string? actionName, object? routeValues);
        RedirectToActionResult RedirectToActionPermanent(string? actionName, string? controllerName);
        RedirectToActionResult RedirectToActionPermanent(string? actionName, string? controllerName, object? routeValues);
        RedirectToActionResult RedirectToActionPermanent(string? actionName, string? controllerName, object? routeValues, string? fragment);
        RedirectToActionResult RedirectToActionPermanent(string? actionName, string? controllerName, string? fragment);
        RedirectToActionResult RedirectToActionPermanentPreserveMethod(string? actionName = null, string? controllerName = null, object? routeValues = null, string? fragment = null);
        RedirectToActionResult RedirectToActionPreserveMethod(string? actionName = null, string? controllerName = null, object? routeValues = null, string? fragment = null);
        RedirectToPageResult RedirectToPage(string pageName);
        RedirectToPageResult RedirectToPage(string pageName, object? routeValues);
        RedirectToPageResult RedirectToPage(string pageName, string? pageHandler);
        RedirectToPageResult RedirectToPage(string pageName, string? pageHandler, object? routeValues);
        RedirectToPageResult RedirectToPage(string pageName, string? pageHandler, object? routeValues, string? fragment);
        RedirectToPageResult RedirectToPage(string pageName, string? pageHandler, string? fragment);
        RedirectToPageResult RedirectToPagePermanent(string pageName);
        RedirectToPageResult RedirectToPagePermanent(string pageName, object? routeValues);
        RedirectToPageResult RedirectToPagePermanent(string pageName, string? pageHandler);
        RedirectToPageResult RedirectToPagePermanent(string pageName, string? pageHandler, object? routeValues, string? fragment);
        RedirectToPageResult RedirectToPagePermanent(string pageName, string? pageHandler, string? fragment);
        RedirectToPageResult RedirectToPagePermanentPreserveMethod(string pageName, string? pageHandler = null, object? routeValues = null, string? fragment = null);
        RedirectToPageResult RedirectToPagePreserveMethod(string pageName, string? pageHandler = null, object? routeValues = null, string? fragment = null);
        RedirectToRouteResult RedirectToRoute(object? routeValues);
        RedirectToRouteResult RedirectToRoute(string? routeName);
        RedirectToRouteResult RedirectToRoute(string? routeName, object? routeValues);
        RedirectToRouteResult RedirectToRoute(string? routeName, object? routeValues, string? fragment);
        RedirectToRouteResult RedirectToRoute(string? routeName, string? fragment);
        RedirectToRouteResult RedirectToRoutePermanent(object? routeValues);
        RedirectToRouteResult RedirectToRoutePermanent(string? routeName);
        RedirectToRouteResult RedirectToRoutePermanent(string? routeName, object? routeValues);
        RedirectToRouteResult RedirectToRoutePermanent(string? routeName, object? routeValues, string? fragment);
        RedirectToRouteResult RedirectToRoutePermanent(string? routeName, string? fragment);
        RedirectToRouteResult RedirectToRoutePermanentPreserveMethod(string? routeName = null, object? routeValues = null, string? fragment = null);
        RedirectToRouteResult RedirectToRoutePreserveMethod(string? routeName = null, object? routeValues = null, string? fragment = null);
        IActionResult RemoveFromCart(int productId);
      
        SignInResult SignIn(ClaimsPrincipal principal);
        SignInResult SignIn(ClaimsPrincipal principal, AuthenticationProperties properties);
        SignInResult SignIn(ClaimsPrincipal principal, AuthenticationProperties properties, string authenticationScheme);
        SignInResult SignIn(ClaimsPrincipal principal, string authenticationScheme);
        SignOutResult SignOut();
        SignOutResult SignOut(AuthenticationProperties properties);
        SignOutResult SignOut(AuthenticationProperties properties, params string[] authenticationSchemes);
        SignOutResult SignOut(params string[] authenticationSchemes);
        StatusCodeResult StatusCode([ActionResultStatusCode] int statusCode);
        ObjectResult StatusCode([ActionResultStatusCode] int statusCode, [ActionResultObjectValue] object? value);
        string? ToString();
        Task<bool> TryUpdateModelAsync(object model, Type modelType, string prefix);
        Task<bool> TryUpdateModelAsync<TModel>(TModel model) where TModel : class;
        Task<bool> TryUpdateModelAsync<TModel>(TModel model, string prefix) where TModel : class;
        Task<bool> TryUpdateModelAsync<TModel>(TModel model, string prefix, IValueProvider valueProvider) where TModel : class;
        bool TryValidateModel(object model);
        bool TryValidateModel(object model, string? prefix);
        UnauthorizedResult Unauthorized();
        UnauthorizedObjectResult Unauthorized([ActionResultObjectValue] object? value);
        UnprocessableEntityResult UnprocessableEntity();
        UnprocessableEntityObjectResult UnprocessableEntity([ActionResultObjectValue] ModelStateDictionary modelState);
        UnprocessableEntityObjectResult UnprocessableEntity([ActionResultObjectValue] object? error);
        ActionResult ValidationProblem();
        ActionResult ValidationProblem(string? detail = null, string? instance = null, int? statusCode = null, string? title = null, string? type = null, [ActionResultObjectValue] ModelStateDictionary? modelStateDictionary = null);
        ActionResult ValidationProblem([ActionResultObjectValue] ModelStateDictionary modelStateDictionary);
        ActionResult ValidationProblem([ActionResultObjectValue] ValidationProblemDetails descriptor);
        ViewResult View();
        ViewResult View(object? model);
        ViewResult View(string? viewName);
        ViewResult View(string? viewName, object? model);
        ViewComponentResult ViewComponent(string componentName);
        ViewComponentResult ViewComponent(string componentName, object? arguments);
        ViewComponentResult ViewComponent(Type componentType);
        ViewComponentResult ViewComponent(Type componentType, object? arguments);
    }
}